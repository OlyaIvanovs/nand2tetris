// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outRegA, sel=instruction[15], out=regA);

    Not(in=instruction[15], out=preloadA);
    Or(a=preloadA, b=instruction[5], out=loadA);

    And(a=instruction[15], b=instruction[3], out=writeM); // writeM Write to Memory ?

    And(a=instruction[4], b=instruction[15], out=loadD); // write in D Register
    DRegister(in=outRegD, load=loadD, out=registerD);

    ARegister(in=regA, load=loadA, out[0..14]=addressM, out=registerA); // write in A Register

    Mux16(a=inM, b=registerA, sel=instruction[12], out=val1); //A or M

    ALU(x=val1 , y=registerD  , zx=instruction[11] , nx=instruction[10] ,zy=instruction[9],
     ny=instruction[8]  ,f=instruction[7]  , no=instruction[6]  , out=outM, out=outRegD, out=outRegA, zr=outZr, ng=outNg);

    Xor(a=outNg, b=outZr, out=preoutPl); // check if out > 0
    Not(in=preoutPl, out=outPl); 
    
    And(a=outZr, b=instruction[1], out=pcload1); // jump if out=0
    And(a=outNg, b=instruction[2], out=pcload2); // jump if out<0
    And(a=outPl, b=instruction[0], out=pcload3); // jump if out>0
    Or(a=pcload1, b=pcload2, out=pcpreload);
    Or(a=pcload3, b=pcpreload, out=pcload); // jump for PC
    And(a=instruction[15], b=pcload, out=jmp); // only load PC if C-inst and other conditions met

    Not(in=jmp, out=pcinc); // inc for PC
    
    PC(in=registerA, load=jmp, inc=pcinc, reset=reset, out[0..14]=pc);
}